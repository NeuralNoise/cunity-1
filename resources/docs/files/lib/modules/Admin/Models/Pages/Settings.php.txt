<?php

namespace Admin\Models\Pages;

use Comments\Models\Db\Table\Comments;
use Core\Cunity;
use Core\View\Ajax\View;
use Core\Models\Mail\Mail;
use Pages\Models\Db\Table\Pages;

/**
 * Class Settings
 * @package Admin\Models\Pages
 */
class Settings extends PageAbstract {

    /**
     *
     */
    public function __construct() {
        if (isset($_POST) && !empty($_POST)) {
            $this->handleRequest();
        } else {
            $this->loadData();
            $this->render("settings");
        }
    }

    /**
     * @throws \Exception
     */
    private function loadData() {
        $langIterator = new \DirectoryIterator("modules/Core/lang");
        $designIterator = new \DirectoryIterator("../style");
        foreach ($designIterator AS $design) {
            if ($design->isDir() && $design->isReadable() && !$design->isDot()) {
                $this->assignments['availableDesigns'][] = [$design->getBasename(), file_get_contents($design->getRealPath() . DIRECTORY_SEPARATOR . "name.txt")];
            }
        }

        foreach ($langIterator AS $lang)
            if ($lang->isReadable() && $lang->getExtension() == "php")
                $this->assignments['availableLanguages'][] = explode("-", $lang->getBasename(".php"));
        $this->assignments["config"] = Cunity::get("config");
    }

    /**
     *
     */
    private function handleRequest() {
        $view = new View();
        switch ($_POST['action']) {
            case "sendTestMail":
                $mail = new Mail();
                $res = $mail->sendMail("TestMail from cunity", "Cunity - Testmail", ["name" => "Cunity Admin", "email" => $_POST['mail']]);
                $view->setStatus($res !== NULL);
                break;
            case "loadPages":
                $pages = new Pages();
                $res = $pages->loadPages();
                $view->setStatus($res !== NULL);
                $view->addData(["pages" => $res->toArray()]);
                break;
            case "deletePage":
                if (isset($_POST['id']) && !empty($_POST['id'])) {
                    $pages = new Pages();
                    $status = $pages->deletePage($_POST['id']);
                    if ($status !== false && false) {
                        $comments = new Comments();
                        $status = $comments->removeAllComments($_POST['id'], "page");
                    } else
                        $status = true;
                    $view->setStatus($status);
                    $view->sendResponse();
                } else
                    $view->setStatus(false);
                break;
            case 'addPage':
                $pages = new Pages();
                $res = $pages->addPage($_POST);
                $page = $pages->getPage($res);
                $view->setStatus($res !== NULL && $res !== false);
                $page->content = html_entity_decode($page->content);
                $view->addData(["page" => $page->toArray()]);
                break;
        }
        $view->sendResponse();
    }

}

